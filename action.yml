# This file's format:
#
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions

name: 'Authenticates a Merge Request'
description: >
    Authenticates a merge request by checking that the commits are
    authorized by the repository's embedded signing policy.

    This action is intended for use with projects that use Sequoia
    git.  Sequoia git is a framework that can improve a project's
    supply chain security.  It defines a set of semantics for
    authorizing commits, and a tool to check that a policy holds.
    Using Sequoia git allows downstream users to check that a new
    version of the software is derived from an older version, which
    can prevent the use of versions that include modifications that
    were not authorized by the project's maintainers.

    To use Sequoia git, you add a policy file to the root of a git
    repository (openpgp-policy.toml), and authorize OpenPGP
    certificates to make different types of changes.  A commit is
    considered authorized if the commit has a valid signature, and at
    least one immediate parent's policy allows the signer to make that
    type of change.  Downstream users check that a new version is
    authorized by using sq-git to verify that there is a chain of
    trust from a known-good old version to the version they are
    interested in.

    See https://gitlab.com/sequoia-pgp/sequoia-git for more details.
author: 'Sequoia PGP'
inputs:
  github_token:
    description: 'GITHUB_TOKEN'
    default: '${{ github.token }}'
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
      with:
        # Fetch from the pull request's repository, not the target
        # repository, which may not include the commits from the pull
        # request.
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        # But checkout the target, not the pull request.
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0

    - run: |
        # As of now (2023-09), GitHub executes `docker run` with the
        # following mount options:
        #
        #   -v "/home/runner/work/_temp/_github_home":"/github/home"
        #   -v "/home/runner/work/_temp/_github_workflow":"/github/workflow"
        #   -v "/home/runner/work/_temp/_runner_file_commands":"/github/file_commands"
        #   -v "/home/runner/work/authenticate-commits/authenticate-commits":"/github/workspace"
        #
        # https://github.com/actions/runner/blob/f6e9809/src/Runner.Worker/Handlers/ContainerActionHandler.cs#L194-L197
        #
        # That is, only a few things are mounted in the docker
        # container, and that does not include the action's repository
        # (which is checked out at ${{ github.action_path }}, aka,
        # /home/runner/work/_actions).
        #
        # Copy the action repository to the "github home" directory.
        # Unfortunately, the "github home" directory is not documented
        # and not explicitly named by an environment variable or
        # github expression.  So, we do the best we can.
        set -ex

        mkdir -p "$RUNNER_TEMP/_github_home/"
        if ! cp -av "${{ github.action_path }}" "$RUNNER_TEMP/_github_home/action"
        then
            echo Error copying action repository to github_home.
            echo ::group::env
            env | sort
            echo ::endgroup::
            echo ::group::RUNNER_TEMP
            find "$RUNNER_TEMP"
            echo ::endgroup::
            exit 1
        fi
      shell: bash

    - uses: docker://registry.gitlab.com/sequoia-pgp/sequoia-git:latest
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        BASE_SHA: ${{ github.event.pull_request.base.sha }}
        HEAD_SHA: ${{ github.event.pull_request.head.sha }}
      with:
        entrypoint: '/bin/bash'
        args: |
          -c "# Be extra careful with quoting!!!
          # Fix the workspace's permissions.
          chown -R $(whoami) .

          # Execute the script.
          S=/github/home/action/src/authenticate-commits.sh
          if ! test -e $S
          then
              # The file doesn't exist or is not executable.
              echo $S does not exist or is not executable.

              echo ::group::env
              env | sort
              echo ::endgroup
              echo ::group::/github/home
              find /github/home
              echo ::endgroup
              exit 1
          else
              bash $S
          fi
          "
    # The sq-git image doesn't include curl or jq.  So we do the
    # processing separately.
    - run: ${{ github.action_path }}/src/authenticate-commits-post.sh
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        BASE_SHA: ${{ github.event.pull_request.base.sha }}
        HEAD_SHA: ${{ github.event.pull_request.head.sha }}
      shell: bash
branding:
  icon: 'arrow-up-right'
  color: 'green'
